name: LinkPNG CI/CD Pipeline

on:
  push:
    branches: [ main, develop, "feature/*" ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PACKAGE_MANAGER: 'npm'

jobs:
  # Job 1: Code Quality & Testing
  quality-check:
    name: 🔍 Code Quality & Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: LinkPNG/packages/frontend/client/package-lock.json

      - name: 📥 Install dependencies
        working-directory: LinkPNG/packages/frontend/client
        run: npm ci

      - name: 🧹 Run ESLint
        working-directory: LinkPNG/packages/frontend/client
        run: npm run lint

      - name: 🏗️ Build application
        working-directory: LinkPNG/packages/frontend/client
        run: npm run build

      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: LinkPNG/packages/frontend/client/.next
          retention-days: 7

  # Job 2: Frontend Deployment (Staging)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.ref == 'refs/heads/develop' || contains(github.ref, 'feature/')
    environment: staging
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: LinkPNG/packages/frontend/client/package-lock.json

      - name: 📥 Install dependencies
        working-directory: LinkPNG/packages/frontend/client
        run: npm ci

      - name: 🏗️ Build for staging
        working-directory: LinkPNG/packages/frontend/client
        run: npm run build
        env:
          NODE_ENV: staging

      - name: 🌐 Deploy to Vercel (Staging)
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: LinkPNG/packages/frontend/client
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Job 3: Production Deployment
  deploy-production:
    name: 🎯 Deploy to Production
    runs-on: ubuntu-latest
    needs: quality-check
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: LinkPNG/packages/frontend/client/package-lock.json

      - name: 📥 Install dependencies
        working-directory: LinkPNG/packages/frontend/client
        run: npm ci

      - name: 🏗️ Build for production
        working-directory: LinkPNG/packages/frontend/client
        run: npm run build
        env:
          NODE_ENV: production

      - name: 🌐 Deploy to Vercel (Production)
        uses: vercel/action@v1
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: LinkPNG/packages/frontend/client
          scope: ${{ secrets.VERCEL_ORG_ID }}

  # Job 4: Performance Testing
  performance-test:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop' || contains(github.ref, 'feature/')
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📊 Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Job 5: Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: quality-check
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 🔍 Run npm audit
        working-directory: LinkPNG/packages/frontend/client
        run: npm audit --audit-level=moderate

      - name: 🛡️ Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 📋 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Job 6: Notification
  notify:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [quality-check, deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 📨 Notify on success
        if: needs.quality-check.result == 'success'
        run: |
          echo "✅ LinkPNG CI/CD pipeline completed successfully!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          
      - name: 🚨 Notify on failure
        if: needs.quality-check.result == 'failure'
        run: |
          echo "❌ LinkPNG CI/CD pipeline failed!"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Please check the logs for details." 